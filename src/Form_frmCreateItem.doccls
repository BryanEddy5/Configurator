Option Compare Database
Option Explicit
Dim RibbonHighCure As Boolean
Dim CableConstruction As New clsCableConstruction
Dim ItemCustomer As New clsCustomer
Dim bBronzeBraided  As Boolean
Private mlFiber1 As New clsFiber
Private mlFiber2 As New clsFiber
Private mlDesignCode As String
Private CableColorIndicator As String
Dim FillerTube As Boolean
Private WithEvents m_frmMainMenu As Form_frmMainMenu
Private m_ItemRequestNumber

Friend Property Get frmMainMenu() As Form_frmMainMenu
If m_frmMainMenu Is Nothing Then Set m_frmMainMenu = Form_frmMainMenu
Set frmMainMenu = m_frmMainMenu
End Property

Friend Property Get ItemRequestNumber() As String

ItemRequestNumber = m_ItemRequestNumber



End Property

Private Sub AfterBaseSelection()

    
    If Me.Armor <> -1 And Not IsNull(Me.Base) Then
    
        Me.Jacket.Requery
        Me.Jacket = Me.Jacket.ItemData(1)
        Me.Color.Requery
        Me.Color = Me.Color.ItemData(1)
        Me.NomOD = Me.Base.Column(2)
        Call Color_AfterUpdate
        
        CableConstruction.Load (Me.Base)
        Me.Location = CableConstruction.Location
        
        'Check for subunits if item is a two pass
        If IsNull(Me.cbSubunit.ItemData(2)) = False And CableConstruction.Location = 2 Then
            MsgBox ("Multiple Possible Subunits.  Review"), vbCritical
        Else
            Me.cbSubunit.Requery
            Me.cbSubunit = Me.cbSubunit.ItemData(1)
        End If
        
        
        'Get color chip
        If Jacket = "NONE" Then
            Me.Color = CreateNewItem.getJacketColor(CableColorIndicator)
    
        Else
            Me.Color.RowSourceType = "Table/Query"
        End If
    
        
        
        
        If bFurcation And Mid(Me.ItemNo, 11, 1) <> "0" Then
            If FindFurcation(Me.Base, Me.Location, Mid(Me.ItemNo, 11, 1)) = False Then
                Me.btnSubmit.Enabled = False
            Else
                Me.btnSubmit.Enabled = True
            End If
        End If
    Else
        Me.cbSubunit.Enabled = False
    
    End If

    If IsNull(Me.Customer) = False Then
        Call Customer_AfterUpdate
    End If
       
    'Identifies if there is a class 1 fiber and runs the sub routine
    If Mid(Me.ItemNo, 12, 1) = "B" And Mid(Me.ItemNo, 11, 1) = "P" Then
        Call Class1Fiber
        Call Fiber1_AfterUpdate
    Else
    
        Call Fiber1_GotFocus
        Me.Fiber1.Requery
        If Me.ItemNo Like "?????@*" Then 'Assign the fiber type of "NONE" for furcation cables
            Me.Fiber1 = "NONE"
        Else
            If IsNull(Me.Fiber1.ItemData(1)) Then 'Check if any fiber is available
                MsgBox "There is no fiber for this indicator and fiber configuration." & vbCrLf & "Check the design code and rebuild.", vbCritical
                Me.btnSubmit.Enabled = False
            Else
                Me.Fiber1 = Me.Fiber1.ItemData(1) 'Else pick the first fiber from the combobox
            End If
        End If
        Call Fiber1_AfterUpdate
    End If
    
    ' Identifies if there is more than one fiber and automatically picks the cheapest available fiber.
    If Me.MixedFiber = 1 Then
        Me.Fiber2.Requery
        Me.Fiber2 = Me.Fiber2.ItemData(1)
        Call Fiber2_AfterUpdate
    End If
    
    Call FiberPrint


    If CableConstruction.Location = 1 Or Forms!frmCreateItem!Armor = -1 Then
        btnUnitSeries.Visible = False
        Me.UnitSeries.Visible = False
        Me.cbSubunit.Enabled = False

    Else
        btnUnitSeries.Visible = True
        Me.UnitSeries.Visible = True
        Me.cbSubunit.Enabled = True
        DoCmd.Close acForm, "frmCreateItemUnitSeriesExist"
    End If

    Call CableAttributes
    
    'Check to see if a 0 color indicator has been requested.
    Call ItemBuildChecks
    
End Sub

Public Sub Autofill()
'Dim rst As New ADODB.Recordset
'Dim cnn As ADODB.Connection
'Dim strColorID As String
Dim errMsg$

errMsg = "Could not find Base." & vbCrLf & "Check design code extension"

If CurrentProject.AllForms("frmCreateItem").IsLoaded = False Then
    Exit Sub
End If

'If no base is found
If IsNull(Me.Base.ItemData(1)) And Me.Armor <> -1 Then
    'Check if construction is a loose tube design
    If Me.ItemNo Like "L*" Then
        If MsgBox("Is this a loose tube armor build?", vbYesNo) = vbYes Then
            If Not LooseTube_Armor(Me.ItemNo) Then
                MsgBox (errMsg), vbCritical
                Exit Sub
            End If
        End If
    Else
        MsgBox (errMsg), vbCritical
        Exit Sub
    End If
End If



'This sub routine completes the base, jacket, color, colorchip and fiber type for an item with one base

If IsNull(Me.Base.ItemData(2)) = False And Me.Armor <> -1 Then


    MsgBox ("Multiple Possible Constructions.  Review"), vbCritical


ElseIf Me.Armor <> -1 Then

   
    Me.Base.Requery
    Me.Base = Me.Base.ItemData(1)
    
End If

    Call AfterBaseSelection
    
    


    
End Sub

Public Sub Base_AfterUpdate()
    
    On Error GoTo Err_Base_AfterUpdate
    Call AfterBaseSelection
   
    
Exit_Base_AfterUpdate:

    
    Exit Sub
    
    
Err_Base_AfterUpdate:

    
    MsgBox Err.Description
    Resume Exit_Base_AfterUpdate
    
End Sub

Sub BronzeBraided()


bBronzeBraided = True


End Sub

Private Sub btnAttachSpec_Click()
' Requires reference to Microsoft Office 11.0 Object Library.
 
   Dim fDialog As Office.FileDialog
   Dim varFile As Variant
 
   ' Clear listbox contents.
   Me.FileList.rowSource = ""
 
   ' Set up the File Dialog.
   Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
 
   With fDialog
 
      ' Allow user to make multiple selections in dialog box
      .AllowMultiSelect = True
             
      ' Set the title of the dialog box.
      .Title = "Please select one or more files"
 
      ' Clear out the current filters, and add our own.
      .Filters.Clear
      .Filters.Add "All Files", "*.*"
      .Filters.Add "Access Databases", "*.MDB"
      .Filters.Add "Access Projects", "*.ADP"
      
 
      ' Show the dialog box. If the .Show method returns True, the
      ' user picked at least one file. If the .Show method returns
      ' False, the user clicked Cancel.
      If .Show = True Then
 
         'Loop through each file selected and add it to our list box.
         
         For Each varFile In .SelectedItems
            Me.FileList.AddItem varFile
         Next
 
      Else
         'MsgBox "You clicked Cancel in the file dialog box."
      End If
   End With


End Sub

Public Sub btnClose_Click()
    On Error GoTo Err_cmdCloseForm_Click
    
'DoCmd.RunCommand acCmdSaveRecord
    DoCmd.Close acForm, "frmCreateItem"
    Forms!frmMainMenu.Form.Visible = True
    
Exit_cmdCloseForm_Click:
    Exit Sub
    
Err_cmdCloseForm_Click:
    MsgBox Err.Description
    Resume Exit_cmdCloseForm_Click
    
    
End Sub

Private Sub btnFindSub_Click()
Dim iComboItem As Integer

For iComboItem = 1 To Me.cbSubunit.ListCount - 1
    Call OpenAClient(3, Me.cbSubunit.ItemData(iComboItem), 1)
Next


End Sub

Private Sub btnFind_Click()
Dim iComboItem As Integer

For iComboItem = 1 To Me.Base.ListCount - 1
    CableConstruction.Load (Me.Base.ItemData(iComboItem))
    
    Call OpenAClient(3, Me.Base.ItemData(iComboItem), Nz(CableConstruction.Location, 2))
Next


End Sub

Private Sub btnPrint_Click()
    DoCmd.OpenForm "frmPrintLineView"
End Sub

Private Sub btnSaveSpec_Click()
Dim CustomerSpec As String
Dim SpecRev As String
Dim Customer As String
Dim strCustomerPartNumber As String
Dim SpecPath As String

Me.CustomerRev = UCase(Me.CustomerRev)

CustomerSpec = UCase(Me.Spec)
SpecRev = Me.CustomerRev
Customer = Me.Customer
strCustomerPartNumber = Me.PID




If Me.FileList.ListCount <> 0 Then
SpecPath = Forms.frmCreateItem.FileList.ItemData(0)
    Call SaveCustomerSpec(CustomerSpec, SpecRev, Customer, SpecPath)
End If

Call SaveSpectoTable(Customer, CustomerSpec, strCustomerPartNumber)


End Sub

Private Sub btnShowSpec_Click()

Dim Customer As String
Dim CustomerSpec As String

Customer = Me.Customer
CustomerSpec = Me.Spec

Call ShowCustomerSpec(CustomerSpec, Customer)


End Sub

Private Sub btnSubmit_Click()
    Dim msgresponse As Integer
    Dim stDocName As String
    Dim strSearch As String
    Dim ExistingItem As New clsCableQualities

    
    If ExistingItem.Load(Me.NewOracle_) Then
        MsgBox "This Oracle part number already exists. Please review.", vbCritical
        DoCmd.OpenForm "frmFindCustomerPID", acNormal, , "Oracle = '" & Me.NewOracle_ & "'", , acWindowNormal
        Me.btnSubmit.Enabled = False
        Exit Sub
    End If

    On Error GoTo Err_btnSubmit_Click
    
    If IsNull(Me.Color) Then
        MsgBox "Select a Color"
        Exit Sub
    End If
    
    If IsNull(getColorChip(Me.Color, Me.Jacket)) Then
        MsgBox "No color chip found for this color jacket combination" & vbCrLf & vbCrLf & "A color chip must be added before you can continue", vbCritical
        Exit Sub
    End If
        
    
    If IsNull(Me.Color) = True Or IsNull(Me.Base) = True Or IsNull(Me.Fiber1) = True _
    Or IsNull(Me.Customer) = True Then
        MsgBox "Fill out form completely", vbCritical
        Exit Sub
    End If
    
    
    If IsNull(Me.cbSubunit) And Me.Location = 2 And Me.Armor <> -1 And bBronzeBraided = False Then
        MsgBox "Subunit construction is missing", vbCritical
        Exit Sub
    End If
    
    If Me.FileList.ListCount <> 0 And (IsNull(Me.PID) = True Or IsNull(Me.Spec) = True Or IsNull(Me.CustomerRev) = True) Then
        MsgBox "Fill out SpecDoc#, PID, and/or Rev", vbCritical
        Exit Sub
    End If
    
        'Identifies if a ribbon item is being made
    'Does this ribbon item need to be high Cure?
    If CableConstruction.TBTypeID = 8 And Mid(Me.ItemNo, 12, 1) <> "8" Then
        'Removed question to prompt for high cure because all Non-peelable ribbons have moved to High Cure
        'If MsgBox("Does this fiber need High Cure? " & vbCrLf & "Will this ribbon go into a TE, Tyco, or Commscope item?", vbYesNo + vbCritical) = vbYes Then
            CableConstruction.RibbonHighCure = True
        'End Select
        'End If
    End If
    
    'Set the listing label to the appropriate value
    'This value will be loaded into Oracle and interpreted at time of label print
    If Not IsNull(Me.ListingCompany) Then
        CreateNewItem.CableQualities.setListingLabel Me.ListingCompany, Not IsNull(Me.ListingType), Not IsNull(Me.ListingTypeCanada)
    End If
    
    
    
    If Me.Armor = -1 Then
    stDocName = "mcrbtnCreateItemSubmit"
    End If
    
    
    If IsNull(Me.ListingCompany) = True And Not (Me.NewOracle_) Like "pt*" And Mid(Me.ItemNo, 9, 1) <> "U" Then
        
        MsgBox ("Please choose a listing company before continuing."), vbCritical
        Exit Sub
        
    End If
        
    If Me.PrintType = 2 And Me.FileList.ListCount = 0 And IsNull(Me.PID) = False Then
        If MsgBox("Does the customer have a spec sheet?  Attach and resubmit.", vbYesNo + vbCritical, "Customer Spec") = vbYes Then
            Call btnAttachSpec_Click
            Exit Sub
        End If
    End If
    
    If Me.MixedFiber = 1 And IsNull(Me.Fiber2) Then
        MsgBox ("Fiber 2 is empty.  Ensure each mixed fiber has a fiber type." & vbCrLf & "Example: -18MM6/6SM9"), vbCritical
        Exit Sub
    End If

    'Check to see if the item possibly exists
    'Need to find a good position to perform this check and then continue with build
'    If CreateNewItem.CatalogExist(Me.Customer, Me.PID, Me.Base, Me.Fiber1, Me.Fiber2, Me.ItemNo, CableConstruction.RibbonHighCure) Then
'        Exit Sub
'    End If
'
        
    DoCmd.SetWarnings False
    
    msgresponse = MsgBox("Are you ready to create this item?", vbYesNo, "Continue")
    If msgresponse = vbNo Then
        Exit Sub
    End If
    
    'If Me.Armor <> -1 Then
    
        'bTBType = Me.Base.Column(7)
    
    'End If
    

    
    DoCmd.SetWarnings False
    If Me.Armor = 0 Then
        Select Case CableConstruction.DesignTypeID
        Case 36, 27
        
           strSearch = "[Fiber] = '" & Me.Fiber1 & "' AND [Base] = '" & Me.Base & "' AND mid([Item No],6,1) = '" & Mid(ItemNo, 6, 1) & "'AND mid([Item No],12,1) = '" & Mid(ItemNo, 12, 1) & "' "
        
        Case Else
            strSearch = "[Fiber2] = '" & Me.Fiber2 & "' AND [Fiber] = '" & Me.Fiber1 & "' AND [Base] ='" & Me.Base & "' AND [Color] = '" & Me.Color & _
            "' AND RibbonHighCure = " & CBool(Int(CableConstruction.RibbonHighCure)) & _
            "  AND left([Item No],8) = '" & Left(Me.ItemNo, 8) & "'  AND mid([Item No],10,3) = '" & Mid(Me.ItemNo, 10, 3) & "' AND mid([Item No],9,1) = 'U'"
            
            
        End Select
        
        DoCmd.OpenForm "frmFiberMatchExisting", acNormal, , strSearch
    Else
        Call CreateItem
        
    End If
    
    

    'if No file is attached then don't launch the save spec routine
    If IsNull(Me.Spec) = False Then
        Call btnSaveSpec_Click
    End If

    DoCmd.SetWarnings True

    DoCmd.Close acForm, "frmWait"

Exit_btnSubmit_Click:
    Exit Sub
    
Err_btnSubmit_Click:
    MsgBox Err.Description
    DoCmd.SetWarnings False
    Resume Exit_btnSubmit_Click
    
    
    
    
End Sub

Private Sub btnUnitSeries_Click()
    On Error GoTo Err_btnUnitSeries_Click
    
    Dim stDocName As String
    Dim stLinkCriteria As String
    Dim lResponse As Integer
    
    
    
    If Forms!frmCreateItem!Exists = -1 Then
        lResponse = MsgBox("Item already exists.  No need for a new Unit Series.", vbOKOnly, "Unit Series")
        
        
        
        
    ElseIf Forms!frmCreateItem!Exists = 0 Then
        stDocName = "frmUnitSeries"
        DoCmd.OpenForm stDocName, , , stLinkCriteria
        Forms!frmUnitSeries!NewUnit = Me.UnitSeries
        
    End If
    
Exit_btnUnitSeries_Click:
    Exit Sub
    
Err_btnUnitSeries_Click:
    MsgBox Err.Description
    Resume Exit_btnUnitSeries_Click
    
    
    
    
End Sub

Private Sub CableAttributes()

Dim SubColor As String

SubColor = Nz(Mid(Me.ItemNo, 11, 1))

If CurrentProject.AllForms("frmFiberMatchExisting").IsLoaded = False And Me.ItemNo Like "*AIA*" Then ' Must Create core cable before creating armored item
    
    MsgBox ("Create core cable before creating armored item.")
    
    DoCmd.Close acForm, "frmCreateItem"
    Forms!frmMainMenu.Visible = True
    Exit Sub
    
ElseIf bCenterMember = True Then
    Exit Sub


    
End If
    
    
    Me.FiberType = Me.Fiber1Type
  

    If SubColor = "0" And Left(Me.ItemNo, 2) <> "KP" Then
        Forms!frmCreateItem!SubColor = 6
    ElseIf SubColor = "0" And Left(Me.ItemNo, 2) = "KP" Then
        Forms!frmCreateItem!SubColor = Mid(Me.ItemNo, 10, 1)
    Else
        Forms!frmCreateItem!SubColor = Mid(Me.ItemNo, 11, 1)
    End If
    
    
    Select Case SubColor
        Case "X"
            Forms!frmCreateItem!MixedSub = 1
            Forms!frmCreateItem!SubX = 1
            Forms!frmCreateItem!TBColor = 0
            If (Me.ItemNo Like "b*" Or Me.ItemNo Like "x*" Or Me.ItemNo Like "r*") Or Not Me.ItemNo Like "*/*" Then 'Identifies if the cable is a breakout and needs sequentially colored subunits
                Forms!frmCreateItem!HybridSubColor = 0
            Else
                Forms!frmCreateItem!HybridSubColor = 1 'Identifies if the cable needs subunits colored by it's Fiber Mode
            End If
        Case "Z"
            Forms!frmCreateItem!MixedTB = 1
            Forms!frmCreateItem!TBColor = 1
            Forms!frmCreateItem!SubX = 1
            Forms!frmCreateItem!MixedSub = 1
            
        
        Case "Y"
            If Me.ItemNo Like "*/*" Then
                Forms!frmCreateItem!HybridSubColor = 1
            End If
            Forms!frmCreateItem!TBY = 1
            Forms!frmCreateItem!TBColor = 1
            Forms!frmCreateItem!SubX = 1
            Forms!frmCreateItem!SubColor = Mid(Me.ItemNo, 10, 1)
        Case "S"
            Forms!frmCreateItem!StripePrint = 1
            Forms!frmCreateItem!TBColor = "S"
            Forms!frmCreateItem!SubX = 1
            Forms!frmCreateItem!SubColor = Mid(Me.ItemNo, 10, 1)
            Forms!frmCreateItem!StripePrint = 1
        
        Case "U"
            Forms!frmCreateItem!TBColor = "U"
            Forms!frmCreateItem!SubX = 1
            Forms!frmCreateItem!MixedSub = 1
            Forms!frmCreateItem!SubColor = Mid(Me.ItemNo, 10, 1)
            Forms!frmCreateItem!TBY = 0
        
        Case Else
            Forms!frmCreateItem!MixedTB = 0
            Forms!frmCreateItem!TBColor = 0
    End Select
        

        

    'Sets tb color
    Call frmCreateItem_Hold
    
    If CableConstruction.TBTypeID = 5 And Me.Location = 1 Then
        bFurcation = True
    ElseIf (CableConstruction.TBTypeID = 32 Or CableConstruction.TBTypeID = 34) And Me.Location = -1 Then
        bCenterMember = True
    Else
        bFurcation = False
        bCenterMember = False
    End If
    
    Call BronzeBraided

End Sub

Public Sub Class1Fiber()

    'Finds the correct class 1 fiber and inserts it into the form
    DoCmd.OpenForm "frmFiberClass"
    Me.OM = Forms!frmFiberClass![OM#]
    Me.BIF = Forms!frmFiberClass!BIF
    Me.Fiber1 = Forms!frmFiberClass!Fiber
    Me.Fiber = Me.Fiber1
    DoCmd.Close acForm, "frmFiberClass"


End Sub



Private Sub Color_AfterUpdate()
'Me.ColorChip = Me.Color.Column(2)


'determines if white print is needed for the finished cable based on the cable color

    If Me.Color Like "*blue*" Or Me.Color Like "*black*" Or Mid(Me.ItemNo, 10, 1) = "8" Or Mid(Me.ItemNo, 10, 1) = "1" Then
        Me.PrintWhite = 1
    Else
        Me.PrintWhite = 0
    End If

End Sub

Private Sub Command192_Click()
On Error GoTo Err_Command192_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command192_Click:
    Exit Sub

Err_Command192_Click:
    MsgBox Err.Description
    Resume Exit_Command192_Click
    
End Sub

Private Sub Command48_Click()
    On Error GoTo Err_Command48_Click
    
    Dim stDialStr As String
    Dim PrevCtl As control
    Const ERR_OBJNOTEXIST = 2467
    Const ERR_OBJNOTSET = 91
    Const ERR_CANTMOVE = 2483
    
    Set PrevCtl = Screen.PreviousControl
    
    If TypeOf PrevCtl Is TextBox Then
        stDialStr = IIf(VarType(PrevCtl) > V_NULL, PrevCtl, "")
    ElseIf TypeOf PrevCtl Is ListBox Then
        stDialStr = IIf(VarType(PrevCtl) > V_NULL, PrevCtl, "")
    ElseIf TypeOf PrevCtl Is ComboBox Then
        stDialStr = IIf(VarType(PrevCtl) > V_NULL, PrevCtl, "")
    Else
        stDialStr = ""
    End If
    
    Application.Run "utility.wlib_AutoDial", stDialStr
    
Exit_Command48_Click:
    Exit Sub
    
Err_Command48_Click:
    If (Err = ERR_OBJNOTEXIST) Or (Err = ERR_OBJNOTSET) Or (Err = ERR_CANTMOVE) Then
        Resume Next
    End If
    MsgBox Err.Description
    Resume Exit_Command48_Click
    
End Sub

Public Sub CreateItem()


'On Error GoTo ErrorHandler

    DoCmd.OpenForm "frmWait", acNormal, "", "", , acNormal
    ' Clear Basic Cable Hold Table
    DoCmd.OpenQuery "qryNewBasicCableDelete", acViewNormal, acEdit
    ' Clear Basic Construction Hold Table
    DoCmd.OpenQuery "qryNewPrductConstructionHoldClear", acViewNormal, acEdit
    ' Clear Unit Series Hold Table
    DoCmd.OpenQuery "qrytblUnitSeriesCopyClear", acViewNormal, acEdit
    



    If Exists = -1 Or Forms!frmCreateItem!Armor = -1 Or Mid(Me.ItemNo, 9, 1) = "T" Then
        Me.Unprinted = 0
  
        Me.btnSubmit.Enabled = False
    
   End If

        If Me.Location = 1 Then
            If Me.NewOracle_ Like "pt*" Then
                Call CreateNewTB
            Else
                Call CreateSinglePassCable
            End If
            
        ElseIf Me.Location = 2 Or Forms!frmCreateItem!Armor = -1 Then
            Call mcrCreateBasicCableSheath
        
        End If
        
        Me.btnClose.SetFocus
        CreateNewItem.NewItemNumber = Me.NewOracle_

        
    

    DoCmd.Close acForm, "frmWait"
    
'ErrorExit:
'Exit Sub
'
'ErrorHandler:
'MsgBox "An error occurred during item creation, please contact product engineering.", vbCritical
'DoCmd.Close acForm, Me.Name
'Forms!frmMainMenu.Visible = True
'Resume ErrorExit




End Sub

Private Sub CreateNewTB()


    If Not CreateNewItem.CableQualities.IsPrinted Then
        Me.Unprinted = -1
    End If
    Call FindTB
    'If FindTB = False Then
        'Call CreateSinglePassCable
        'Exit Sub
    'End If
    
    DoCmd.OpenForm "frmFiberSpec"
    
    DoCmd.OpenQuery "qryNewPrductConstructionHoldClear"
    DoCmd.OpenQuery "qryNewPrductConstructionClear"
    DoCmd.OpenQuery "qryLOADNewTBs"
    DoCmd.OpenQuery "qryUpdateNewTBs"
    Call TBMaterial_Update
    DoCmd.OpenQuery "qryNewBasicConstructionAppend"
    
    DoCmd.Close acForm, "frmFiberSpec"
    DoCmd.OpenForm "frmNewSubunit"
    

End Sub

Public Function CreateSinglePassCable()
    If Left(Me.ItemNo, 2) = "FB" Or Left(Me.NewOracle_, 2) = "pt" Then
        Me.Unprinted = 0
    End If
    
    
    
    
    DoCmd.OpenForm "frmFiberSpec"
    DoCmd.OpenQuery "qryNewBasicConstructionClear"
    DoCmd.OpenQuery "qryNewBasicConstruction"
    DoCmd.OpenQuery "qryUpdateNewProductConstruciton"
    
    'Finds the appropriate tight buffer type depending on the cable family, jacket material, and tigh buffer indicator
    If CableConstruction.TBTypeID = 5 Then
        DoCmd.OpenQuery "qryfrmCreateItemFurcationUpdate"     'Furcation tube
    ElseIf CableConstruction.TightBuffered Then
        Call TBMaterial_Update                          'Tight buffers
    Else
        DoCmd.OpenQuery "qryfrmCreateItemUpdateTBMaterial_NoMaterial"
    End If

    
    If Me.PrintType <> 0 Or Left(Me.ItemNo, 2) = "FB" Or Left(Me.NewOracle_, 2) = "pt" Or Left(Me.NewOracle_, 3) = "rbn" Then
        DoCmd.OpenQuery "qryNewBasicConstructionAppend"
    End If
    'Finds if cable needs unprinted "-00" extensions. This does not apply to "PF", bare fibers, items
    If Me.Unprinted = -1 Then
         If Left(Me.NewOracle_, 3) = "rbn" Then
            DoCmd.RunSQL "UPDATE tblNewPrductConstruction SET [New Oracle Part #] = [New Oracle Part #] & '-OSP' , [Customer] = 'OUTSIDE PROCESSING'"
        Else
            DoCmd.OpenQuery "qryNewProductBasicUnprintedUpdate"
        End If
       
        DoCmd.OpenQuery "qryNewProductBasicUnprintedAppend"

    End If
    
    If Not CreateNewItem.CableQualities.IsPrinted And Forms!frmCreateItem!PrintType <> 0 Then
        DoCmd.OpenQuery "qryNewProductBasicUnprintedUpdateCustomer"
    
    End If
    
    '8/2/2016 ***Causing confusion to associates on floor with special instructions.  Special instructions removed to avoid issues****
    'If the ribbon requires High Cure, then update the table to reflect high cure, RibbonHighCure = 1
    If CableConstruction.RibbonHighCure = True Then
        DoCmd.RunSQL "UPDATE tblNewProductConstructionHold SET RibbonHighCure = -1 " ',[Special Instr Product1] = 'CUSTOMER REQUIRES **HIGH CURE** RIBBONIZATION'"
    End If
    
    
    DoCmd.Close acForm, "frmFiberSpec"
    DoCmd.OpenForm "frmNewSubunit"
End Function

Private Sub Customer_AfterUpdate()
    Dim lResponse As Integer
    'Reset associated fields
    
    
    If IsNull(Me.Customer) Then
        MsgBox "A customer must be input", vbCritical
        Me.Customer.SetFocus
        Exit Sub
    End If
    
    Me.PID = Null
    Me.PID.Requery
'    Me.PrintLine1 = Null
    Me.PrintLine1.Requery
'    Me.PrintLine2 = Null
    Me.PrintLine2.Requery
    If Me.Armor = 0 Then
        Me.PrintLine3 = Null
        Me.PrintLine3.Requery
    End If
     Me.Customer = Replace(Me.Customer, Chr(13) & Chr(10), "")
    
    
    
    
    If Me.Customer Like "*BELDEN*" Then
        'Me.ListingNumber = "BELDEN-D"
    ElseIf Me.Customer Like "*MOHAWK*" Then
        'Me.ListingNumber = "MOHAWK-D"
    ElseIf Me.Customer Like "*DURA*" Then
        Me.PrintLine1 = "AFL eABF OPTICAL CABLE"
        Me.PrintLine4 = "MM/YY 000000 FEET     (Print every other foot)"
    End If
    
    If (Me.Customer Like "*te con*" Or Me.Customer Like "*tyco*" Or Me.Customer Like "*commscope*") And (Me.OM = "OM3" Or Me.OM = "OM4") Then
        lResponse = MsgBox("Is this a Class 1 Fiber?", vbYesNo + vbCritical)
            If lResponse = vbYes Then
            
                Call Class1Fiber
                
            End If
    End If
    
    
    
        
    ItemCustomer.Load (Me.Customer)
    If ItemCustomer.IsExistingCustomer = False Then
        If MsgBox("Customer does not exist.  Do you want to add this customer?", vbYesNo) = vbYes Then
            ItemCustomer.AddNewCustomer (Me.Customer)
        End If
    Else
        If Not IsNull(Me.Base) Then
            If ItemCustomer.IsProhibitedDesign(Me.Base) Then
                MsgBox "This base is prohibited for " & Me.Customer & "." & vbCrLf & " Comments why: " & ItemCustomer.CustomerProhibitedNotes, vbCritical
                Me.btnSubmit.Enabled = False
            Else
                'Me.btnSubmit.Enabled = True
            End If
        End If
            
    End If
    
    'If ItemCustomer.getCustomerNotes <> Empty Then
        Me.txCustomerNotes = ItemCustomer.getCustomerNotes
    'End If
        

    
    
    
End Sub

Private Sub Customer_GotFocus()
'    Me.Customer.SetFocus
End Sub

Public Sub Fiber1_AfterUpdate()


    Me.Fiber = Me.Fiber1
    If IsNull(Me.Fiber1) = False Then
        mlFiber1.Load (Fiber1)
        Me.OM = mlFiber1.OM
        Me.BIF = mlFiber1.BIF
        Me.Mode = mlFiber1.Mode
    End If
    'DoCmd.OpenForm "frmFiberMode"
    

    
    If Me.MixedFiber = 1 Then
        
    Else
        
        If Me.MixedFiber = 0 Then
            mlFiber1.setFiberCount = Int(Mid(Me.ItemNo, 3, 3))
            

        Else
            mlFiber1.setFiberCount = Me.Fiber1Count
            Me.PrintLine2 = Null
            Me.PrintLine2.Requery
        End If
    End If
    'DoCmd.Close acForm, "frmFiberMode"
    
    If Me.PrintType = 3 And Me.MixedFiber = 0 Then
        PrintType_AfterUpdate
    End If
    
    Call FiberPrint
    
'DoCmd.OpenQuery "qryfrmCreateItemFiberModeUpdate"
'DoCmd.Requery "OM"
'DoCmd.Requery "BIF"
End Sub

Private Sub Fiber1_GotFocus()

If Me.MixedFiber <> 1 Then


    Select Case Me.FiberExt
        Case 1
            Me.Fiber1.rowSource = "qryfrmCreateItemFiber1TypeExtension"
        Case 2
            Me.Fiber1.rowSource = "qryfrmCreateItemFiber1TypeBIF"
'        Case 3
'            Me.Fiber1.RowSource = "qryfrmCreateItemFiber1TypeITU"
        Case Else
            Me.Fiber1.rowSource = "qryfrmCreateItemFiberType"
    End Select
Else

    Select Case Me.FiberExt
        Case 1
            Me.Fiber1.rowSource = "qryfrmCreateItemFiber1TypeExtension"
        Case 2
            Me.Fiber1.rowSource = "qryfrmCreateItemFiber1TypeBIF"
            Me.Fiber2.rowSource = "qryfrmCreateItemFiber2TypeBIF"
        Case Else
            Me.Fiber1.rowSource = "qryfrmCreateItemFiberType"
            Me.Fiber2.rowSource = "qryfrmCreateItemFiber2Type"
            
    End Select
        
End If
Call UserCheck

If sUser = 1 Then
    Me.Fiber1.LimitToList = False
    Me.Fiber2.LimitToList = False
Else
    Me.Fiber1.LimitToList = True
    Me.Fiber2.LimitToList = True
End If

End Sub

Private Sub Fiber2_AfterUpdate()
    
    On Error GoTo Err_Fiber2_AfterUpdate
    
    If IsNull(Me.Fiber2) = False Then
        mlFiber2.Load (Me.Fiber2)
        Me.OM2 = mlFiber2.OM
        Me.BIF2 = mlFiber2.BIF
        Me.Mode2 = mlFiber2.Mode
    End If
    
    Call FiberPrint

    If Me.PrintType = 3 Then
        PrintType_AfterUpdate
    End If

    
    Me.FiberType2 = Me.Fiber2
   
Exit_Fiber2:
    Exit Sub
    
Err_Fiber2_AfterUpdate:
    If Err.Number = 13 Then
        MsgBox "Mixed fiber counts must be at least 2 digits " & vbCrLf & "Example: -01MM5/01SM4"
    Else
        MsgBox Err.Description & " " & Err.Number
    End If
    'DoCmd.Close acForm, "frmFiberMode2"
        'DoCmd.Close acForm, "frmFiberMode"
    Resume Exit_Fiber2

    
 
    
End Sub

Private Sub FiberPrint()
Dim cFiber As New Collection
Dim i, j As Integer
Dim PrintLine2$
j = 1


cFiber.Add mlFiber1
cFiber.Add mlFiber2

For i = 1 To cFiber.count
    If cFiber(j).Fiber = "FBR00100" Or cFiber(j).Fiber = Empty Then
        cFiber.Remove j
        j = j - 1
    End If
    j = j + 1
Next

If cFiber.count = 0 Then
    Exit Sub
End If

PrintLine2 = getFiberPrint(cFiber, mlDesignCode, CableConstruction.TBTypeID)

Me.Fiber1Count = mlFiber1.getFiberCount
Me.Fiber2Count = mlFiber2.getFiberCount

If Not CreateNewItem.CableQualities.IsPrinted Then
    Exit Sub
End If

Me.PrintLine2 = PrintLine2


If mFiberPrint.isVendorSpecificPrint And Me.PrintType = 3 Then
    Me.PID = UCase(mFiberPrint.FiberVendor) & " PRINT"
End If

 If (Me.Jacket = "PVC00145" Or Me.Jacket = "JKT00120" Or Me.Jacket = "JKT00119") And Me.Color = "BLACK" And (Left(Me.ItemNo, 1) = "K" Or Left(Me.ItemNo, 1) = "Q") Then
    Me.PrintLine2 = Me.PrintLine2 & " SUN RES"
End If



End Sub

Private Sub FiberSpecs2_Click()
    DoCmd.OpenForm "frmFiberSpec2View"
End Sub

Private Sub FiberSpecs_Click()
    On Error GoTo Err_FiberSpecs_Click
    
    Dim stDocName As String
    stDocName = "frmFiberSpecView"
    DoCmd.OpenForm stDocName
    
Exit_FiberSpecs_Click:
    Exit Sub
    
Err_FiberSpecs_Click:
    MsgBox Err.Description
    Resume Exit_FiberSpecs_Click
    
End Sub

Private Sub Form_Load()
    DoCmd.Maximize
    Dim count As Integer
    count = 1
    mlDesignCode = Me.ItemNo
    bFurcation = False
    bCenterMember = False
    FillerTube = False
    
    frmMainMenu.Visible = False

    If mlDesignCode Like "M?*@*" Then
        bCenterMember = True
    ElseIf mlDesignCode Like "*000@*" Then
        bFurcation = True
    End If
    
    If mlDesignCode Like "??000@??[1U]?00*" Then
        If MsgBox("Is this a filler?", vbYesNo) = vbYes Then
            FillerTube = True
            bCenterMember = False
            bFurcation = False
        End If
    End If
  

    
    If Mid(mlDesignCode, 9, 1) <> "U" Then
        CreateNewItem.CableQualities.IsPrinted = True
    Else
        CreateNewItem.CableQualities.IsPrinted = False
    End If
    
    'Determine cable color indicator
    If Len(mlDesignCode) >= 10 Then
        CableColorIndicator = Mid(mlDesignCode, 10, 1)
    Else
        CableColorIndicator = "0"
    End If

    Me.btnSubmit.Enabled = True
    
    Me.Fiber12 = 1
    
    Me.PrintType.rowSource = "qryfrmFiberType"
    
    Me.FileList.rowSource = ""
    
    Me.Color.rowSource = "qryfrmCreateItemChipColor"
    


    If sUser <> 1 Then
        Me.Fiber1.LimitToList = True
        Me.Fiber2.LimitToList = True
    End If
    
    Call SetBaseRowSource
    
    Call LockFormFields
    
End Sub


Sub SetBaseRowSource()
Dim rowSource$
Dim rowSourceCriteria$

    If CreateNewItem.ItemExtensionDesignCheck(mlDesignCode) Then
        rowSourceCriteria = " WHERE DesignExtension = '" & CreateNewItem.GetDesignCodeExtension & "'"
    Else
        rowSourceCriteria = " WHERE DesignExtension is null"
    End If

    If Mid(mlDesignCode, 9, 1) = "T" Then
        Me.Unprinted = 0
        rowSource = "qryfrmCreateItemBaseTestItems"
    ElseIf bFurcation Then
        rowSource = "qryfrmCreateItemBaseFurcation"
    ElseIf bCenterMember Then
        rowSource = "qryfrmCreateItemBaseCenterMember"
    Else
        rowSource = "qryfrmCreateItemBaseNew"
    End If
    
    rowSource = "SELECT * FROM " & rowSource & rowSourceCriteria
    
    
    Me.Base.rowSource = rowSource
    
End Sub

Sub LockFormFields()
    
    Forms!frmCreateItem!Base.Enabled = True
    Forms!frmCreateItem!Jacket.Enabled = True
    Forms!frmCreateItem!Color.Enabled = True
    Forms!frmCreateItem!ColorChip.Enabled = True
    Forms!frmCreateItem!Fiber1.Enabled = True

    
    If Me.ItemNo Like "*/*" Then
        Forms!frmCreateItem!MixedFiber = 1
        Forms!frmCreateItem!Fiber2.Visible = True
        Forms!frmCreateItem!OM2.Visible = True
        Forms!frmCreateItem!BIF2.Visible = True
        Forms!frmCreateItem!SubX = 1
        Forms!frmCreateItem!FiberSpecs2.Visible = True
        
    Else
        Forms!frmCreateItem!MixedFiber = 0
        Forms!frmCreateItem!Fiber2.Visible = False
        Forms!frmCreateItem!OM2.Visible = False
        Forms!frmCreateItem!BIF2.Visible = False
        Forms!frmCreateItem!FiberSpecs2.Visible = False
    End If
    
    
    
    
    
    Me.ListingCompany.Enabled = True
    Me.ListingCompany.Locked = False
    
    
    'Set all fields to enabled.  The main menu form will turn off certain fields depending on print
    Forms!frmCreateItem!Customer.Enabled = True
    Forms!frmCreateItem!PID.Enabled = True
    Forms!frmCreateItem!Spec.Enabled = True
    Forms!frmCreateItem!CustomerRev.Enabled = True
    Forms!frmCreateItem!ListingCompany.Enabled = True
    Forms!frmCreateItem!PrintLine1.Enabled = True
    Forms!frmCreateItem!PrintLine2.Enabled = True
    Forms!frmCreateItem!PrintLine3.Enabled = True
    Forms!frmCreateItem!PrintLine4.Enabled = True
    Forms!frmCreateItem!ListingType.Enabled = True
    Forms!frmCreateItem!ListingTypeCanada.Enabled = True
    
    


End Sub

Private Sub frmCreateItem_Hold()
Dim TBType As String

TBType = Mid(Me.ItemNo, 12, 1)

Forms!frmCreateItem!TBType = TBType

End Sub

Private Sub ItemBuildChecks()

    If Mid(mlDesignCode, 10, 1) = "0" And (Me.Jacket <> "NONE" Or Me.Jacket = "") Then
        MsgBox ("Jacket color indicator cannot be '0'." & vbCrLf & "Insert a color designation from WI-123 document for the desired color."), vbCritical
        Me.btnSubmit.Enabled = False
    End If
    
    


End Sub

Private Sub Jacket_AfterUpdate()
    
    Me.Color = Null
    Me.ColorChip = Null
    Me.ColorChip.Requery
    Me.Color.Requery
    
    DoCmd.RunMacro "mcrfromCreateItemJacket"
    

    
    
    
End Sub

Private Sub KQ_TBMaterial()
'KQ & KP series has different TB material requirements for differing fiber counts
Dim cnn As ADODB.Connection
Dim rst As New ADODB.Recordset
Set cnn = CurrentProject.Connection
Dim rs As New ADODB.Recordset
Dim strFiberCount As String

rst.Open "tblNewPrductConstruction", cnn, adOpenKeyset, adLockOptimistic
strFiberCount = Mid(rst![Item No], 3, 3)


rs.Open "tblKQ_TBType WHERE FiberCount = '" & strFiberCount & "'", cnn, adOpenKeyset, adLockOptimistic

rst![TB Material] = rs!TBMaterial
rst.Update

rst.Close
rs.Close
cnn.Close


End Sub

Public Sub ListingAutoFill()
Me.ListingType = Me.ListingType.ItemData(0)
Me.ListingConstruction = Me.ListingType.Column(1)
Me.Listing = Me.ListingType.Column(3)
Me.ListingSection = Me.ListingType.Column(2)



End Sub

Private Sub ListingCompany_AfterUpdate()
    DoCmd.RunMacro "mcroListingCompany"
    If Me.ListingCompany = "NONE" Then
    Me.ListingType.Enabled = False
    Me.ListingTypeCanada.Enabled = False
    Exit Sub
    Else
    Me.ListingType.Enabled = True
    Me.ListingTypeCanada.Enabled = False
    End If
    
    
'    If Me.ListingCompany = "ETL" Then
'        Me.ListingNumber = "115304"
'    ElseIf Me.ListingCompany = "UL" Then
'        Me.ListingNumber = "E121250"
'    Else
'        Me.ListingNumber = Null
        
'    End If
    
    If IsNull(Me.PrintLine3) = True Or Me.PrintLine3.Enabled = True Then
        Me.PrintLine3 = Null
        Me.PrintLine3.Requery
    Else
    End If
    
    Me.ListingType = Null
    Me.ListingType.Requery
    Me.ListingTypeCanada = Null
    Me.ListingTypeCanada.Requery
    
    
    
End Sub

Private Sub ListingCompany_GotFocus()
    'If Mid(Me.ItemNo, 6, 1) = "@" Then
        'Me.ListingCompany.RowSourceType = "Value List"
        'Me.ListingCompany.RowSource = "NONE"
    'End If
End Sub

Private Sub ListingTypeCanada_AfterUpdate()

If IsNull(Me.ListingTypeCanada) Then
Exit Sub
End If

If Me.Customer Like "*belden*" Then
Me.PrintLine3 = "c(" & Me.ListingCompany & ") TYPE " & Me.ListingType & " " & Me.ListingTypeCanada & " (" & Me.ListingCompany & ") " & Me.ListingType & " RoHS"

ElseIf Me.Customer Like "TE CON*" Or Me.Customer Like "TYCO*" Or Me.Customer Like "*COMMSCOPE*" Then
    Me.PrintLine3 = Me.ListingType & "-" & Me.ListingTypeCanada & " c(" & Me.ListingCompany & ")us " & Me.ListingType & " RoHS"

Else
Me.PrintLine3 = "(" & Me.ListingCompany & ") TYPE " & Me.ListingType & " " & Me.ListingTypeCanada & " c(" & Me.ListingCompany & ") RoHS"

End If

Call PrintLine3_AfterUpdate

End Sub

Public Sub ListingType_AfterUpdate()

Me.ListingConstruction = Me.ListingType.Column(1)
Me.Listing = Me.ListingType.Column(3)
Me.ListingSection = Me.ListingType.Column(2)

If Me.ListingCompany = "MSHA" And Me.ItemNo Like "*aia*" Then

    If Not Me.PrintLine2 Like "*" & Me.ListingType & "*" Then
    
        Me.PrintLine2 = Me.PrintLine2 & "    " & Me.ListingType
        Me.PrintLine3 = "CAUTION! Not to be used where permissible equipment is required"
    End If
    
    Exit Sub
ElseIf Me.ListingCompany = "MSHA" Then
    If Not Me.PrintLine3 Like "*" & Me.ListingType & "*" Or IsNull(Me.PrintLine3) = True Then
        Me.PrintLine3 = Me.ListingType
    End If
    
    Exit Sub
End If

If Me.Customer Like "*belden*" Then
    Me.PrintLine3 = "c(" & Me.ListingCompany & ") TYPE " & Me.ListingType & " (" & Me.ListingCompany & ") " & Me.ListingType & " RoHS"

ElseIf Me.Customer Like "TE C*" Or Me.Customer Like "TYCO*" Or Me.Customer Like "*COMMSCOPE*" Then
    Me.PrintLine3 = Me.ListingType & " c(" & Me.ListingCompany & ")us " & Me.ListingType & " RoHS"

Else
    Me.PrintLine3 = "(" & Me.ListingCompany & ") TYPE " & Me.ListingType & "  RoHS"
    
End If

Call PrintLine3_AfterUpdate
Me.ListingTypeCanada = Null
Me.ListingTypeCanada.Requery
Me.ListingTypeCanada = Me.ListingTypeCanada.ItemData(0)

Call ListingTypeCanada_AfterUpdate


End Sub

Sub ListingUpdate()
Dim ENumber As String, printLine As String

printLine = Nz(Me.PrintLine1, "") + " " + Nz(Me.PrintLine2, "") + " " + Nz(Me.PrintLine3, "")

'If Customer ID is empty then requery and see if the customer ID can be gathered
If (ItemCustomer.CustomerID = "") Then ItemCustomer.Load (Me.Customer)

'If the customer ID is still empty then run an update
If (ItemCustomer.CustomerID = "") Then
    
    Me.Customer.Requery
    Customer_AfterUpdate

End If

ENumber = BurnListing.getBurnFileNumber(ItemCustomer.CustomerID, Me.ListingType.Column(4))

Me.ListingNumber = ENumber

'If the customer is AFL or the print contains AFL then the eNumber is not needed within the print
If printLine Like "*afl *" Then
        
    ENumber = ""
    
End If
    
    
If ENumber <> "" And Not printLine Like "*" & ENumber & "*" Then
    Me.PrintLine3 = ENumber & " " & Me.PrintLine3
End If
    
    
End Sub

Private Sub m_frmMainMenu_ItemRequestNumber(Value As String)
m_ItemRequestNumber = Value
CreateNewItem.ItemRequestNumber = Value
End Sub

Private Sub PID_AfterUpdate()

If IsNull(Me.PID) Then
    Exit Sub
End If
Me.PID = Replace(Me.PID, Chr(13) & Chr(10), "")

If Me.PrintType = 2 Then
    If CommonFunctions.DoesPIDExist(Me.Customer, Me.PID) = True Then
        MsgBox ("There is an active Item for this PID and Customer." & vbCrLf & vbCrLf & "Either deactivate the existing item" & vbCrLf & "Or" & vbCrLf & "Update existing item Spec and Rev"), vbCritical
        Me.btnSubmit.Enabled = False
        DoCmd.OpenForm "frmFindCustomerPID", acNormal, , "Customer = '" & Me.Customer & "' AND [PID] = '" & Me.PID & "'", , acWindowNormal
    Else
        Me.btnSubmit.Enabled = True
    End If
    
End If


End Sub

Private Sub PrintLine3_AfterUpdate()
    If IsNull(Me.Customer) Then
        MsgBox "Must choose a Customer", vbCritical
        Exit Sub
    End If

Call ListingUpdate

    
    
End Sub

Private Sub PrintLine4_AfterUpdate()
If Me.ItemNo Like "*test*" Or Mid(Me.ItemNo, 9, 1) = "2" Then
    Exit Sub
End If

If Me.PrintLine4.Column(1) = 1 Then
    If Me.ItemNo Like "*MSHA*" Then
        Me.NewOracle_ = Left(Me.NewOracle_, 8) & "03"
    Else
        Me.NewOracle_ = Left(Me.NewOracle_, 8) & "01"
    End If
    
ElseIf Me.PrintLine4.Column(1) = 2 Then
    If Me.ItemNo Like "*MSHA*" Then
        Me.NewOracle_ = Left(Me.NewOracle_, 8) & "04"
    Else
        Me.NewOracle_ = Left(Me.NewOracle_, 8) & "02"
    End If
    
End If
End Sub

Public Sub PrintType_AfterUpdate()
    DoCmd.RunMacro "mcrPrintType"
    Dim eAbfPrint, AflPrint, AflGenericPrint As String
    
    eAbfPrint = "AFL eABF OPTICAL CABLE"
    AflPrint = "AFL OPTICAL CABLE   1-800-AFL-FIBER"
    AflGenericPrint = "OPTICAL FIBER CABLE"
    
If CreateNewItem.CableQualities.IsPrinted Then
    Select Case Me.PrintType
        Case 1
           
            If Left(Me.ItemNo, 1) = "A" Then
                Me.PrintLine1 = eAbfPrint
            Else
                 Me.PrintLine1 = AflPrint
            End If
        Case 2
            If Left(Me.ItemNo, 1) = "A" Then
                Me.PrintLine1 = eAbfPrint
            Else
                Me.PrintLine1 = AflGenericPrint 'Creates Print Line 1
            End If
        Case 3
            Me.PrintLine1 = AflGenericPrint
    End Select
End If
    


'Dissables generic print PID, Doc, and Rev input
If Me.PrintType = 2 Then
    Me.Customer.Enabled = True
    Me.PID.Enabled = True
    Me.Spec.Enabled = True
    Me.CustomerRev.Enabled = True
    Me.PID = Null
    'Me.PID.SetFocus
Else
    Me.Customer.Enabled = False
    Me.PID.Enabled = False
    Me.Spec.Enabled = False
    Me.CustomerRev.Enabled = False
End If

If Me.PrintType = 3 Then
    If Me.ListingCompany.Enabled = True Then
    Me.ListingCompany.SetFocus
    End If
Else
    If Me.Customer.Enabled = True Then
        Me.Customer.SetFocus
    End If
End If

If Me.PrintType = 2 And Not CreateNewItem.CableQualities.IsPrinted Then
    Me.NewOracle_ = Left(Me.NewOracle_, 7) & "-10"
ElseIf Me.PrintType = 0 And Not CreateNewItem.CableQualities.IsPrinted Then
    Me.NewOracle_ = Left(Me.NewOracle_, 7) & "-00"
End If

If mFiberPrint.isVendorSpecificPrint And Me.PrintType = 3 Then
    Me.PID = mFiberPrint.FiberVendor & " PRINT"
End If


        
End Sub

Private Sub PrintType_GotFocus()
Dim PrintType As String

PrintType = Mid(Me.ItemNo, 9, 1)
Select Case PrintType
    Case 2
        Me.PrintType.rowSource = "qryfrmFiberTypeSpecialPrint"
    Case 1
        Me.PrintType.rowSource = "qryfrmFiberTypeStandard"
    Case "U"
        'me.PrintType.RowSource = ""
End Select

End Sub

Private Sub Refresh_Click()
        
    Me.Requery
    
    
    DoCmd.OpenForm "frmBaseNomOD"
    Forms!frmCreateItem!NomOD = Forms!frmBaseNomOD!OD
    DoCmd.Close acForm, "frmBaseNomOD"
    
    
    
    
End Sub

Private Sub Spec_AfterUpdate()
If IsNull(Me.Spec) = False Then
Me.Spec = Replace(Me.Spec, Chr(13) & Chr(10), "")
End If
End Sub

Public Sub StandardPrint()


Call FiberPrint



End Sub

Private Sub StripedPrint_AfterUpdate()
If Me.StripedPrint = -1 Then
    Me.StripePrint = 1
Else
    Me.StripePrint = 0
End If
End Sub

Public Sub TBMaterial_Update()




If Left(Me.ItemNo, 2) = "WB" Or Left(Me.ItemNo, 2) = "RB" Then
    Exit Sub
End If


DoCmd.OpenForm "frmTBMaterial"





If Me.NewOracle_ Like "pt*" Or Me.NewOracle_ Like "pf*" Then
Forms!frmTBMaterial.RecordSource = "qryfrmCreateItemTBMaterialMatch_ForTB"
Else
Forms!frmTBMaterial.RecordSource = "qryfrmCreateItemTBMaterialMatch"
End If
'Select Case Me.TBType
    'Case 1, 2, 3, 4, 5, 6, 7, 8, 9, "G", "H", "U", "E"
Forms!frmTBMaterial.Requery

'If no TB material is located for the design then it notifies the user
If IsNull(Forms!frmTBMaterial![TB Material]) = True Then
    MsgBox "No TB Material found for TB Type, Stop Item Creation", vbCritical
    'Exit Sub
    
End If


DoCmd.OpenQuery "qryfrmCreateItemTBMaterialUpdate"

DoCmd.Close acForm, "frmTBMaterial"

If Left(Me.ItemNo, 2) = "KQ" Or Left(Me.ItemNo, 2) = "KP" Then
    Call KQ_TBMaterial
End If


'End Select

End Sub
