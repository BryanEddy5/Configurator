Option Compare Database
Option Explicit
Public Event ItemRequestNumber(Value As String)
Dim ArmorCheck As Boolean
Public Sub BoxPrint()
Dim PrintLine1 As String
Dim PrintType As String
Dim strNewItemNo  As String



If strNewItemNo Like "rbn*" Then
    Exit Sub
End If
    



PrintType = Mid(ItemNo, 9, 1)


If PrintType = "1" Then


strNewItemNo = NextItemNo(Me.ItemNo, False)
Forms!frmCreateItem![NewOracle#] = strNewItemNo


    If Me.ItemNo Like "*1MFBOX*" Then
        Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-02BX1"
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 00000 FEET     (every 2 feet, reset counter, 1000ft)"
        Forms!frmCreateItem!Customer = "AFL STD -1000FT"

        
    ElseIf Me.ItemNo Like "*2MFBOX*" Then

        Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-02BX2"
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 00000 FEET     (every 2 feet, reset counter, 2000ft)"
        Forms!frmCreateItem!Customer = "AFL STD -2000FT"

        
    ElseIf Me.ItemNo Like "*3MFBOX*" Then

        Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-02BX3"
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 00000 FEET     (every 2 feet, reset counter, 3000ft)"
        Forms!frmCreateItem!Customer = "AFL STD -3000FT"

    Else

        Call CustomBoxLength(1)
        
    End If
    
        Forms!frmCreateItem![PrintType].Value = "1"
        Forms!frmCreateItem!PrintLine1 = "AFL OPTICAL CABLE   1-800-AFL-FIBER"
        Forms!frmCreateItem!Customer = "AFL STANDARD"
    
    Call DissablePrint(True)
ElseIf PrintType = 2 Then

    Call CustomBoxLength(2)


End If

End Sub

Private Sub CustomBoxLength(PrintType As Integer)
Dim intBoxValue As String
Dim dblBoxExtension As String
Dim Aresponse As Integer

    Aresponse = MsgBox("Is the print in Meters?", vbYesNo, "Continue")

    intBoxValue = InputBox("How many units of cable are in this boxed item?", "Feet of Cable", 0)
    
    
    If intBoxValue Mod 1000 = 0 Then
        dblBoxExtension = Round(intBoxValue / 1000, 0)
    Else
        dblBoxExtension = Round(intBoxValue / 1000, 2)
    End If
    
    
    If PrintType = 1 Then
        If Aresponse = vbYes Then
            Forms!frmCreateItem![NewOracle#] = Forms!frmCreateItem![NewOracle#] & "-01BX" & dblBoxExtension
        Else
            Forms!frmCreateItem![NewOracle#] = Forms!frmCreateItem![NewOracle#] & "-02BX" & dblBoxExtension
        End If
    
        Forms!frmCreateItem!PrintLine4.Locked = True
    Else
        Forms!frmCreateItem![NewOracle#] = Forms!frmCreateItem![NewOracle#] & "BX" & dblBoxExtension
    End If
    
    If Aresponse = vbYes Then
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 METERS   (reset counter, " & intBoxValue & "m)"
        
    Else
        
        Forms!frmCreateItem![PrintLine4] = "MM/YY 00000 FEET     (every 2 feet, reset counter, " & intBoxValue & "ft)"
        
        
    End If




End Sub

Private Sub DissablePrint(Dissable As Boolean)

    Forms!frmCreateItem!Customer.Enabled = Not Dissable
    Forms!frmCreateItem!PID.Enabled = Not Dissable
    Forms!frmCreateItem!Spec.Enabled = Not Dissable
    Forms!frmCreateItem!CustomerRev.Enabled = Not Dissable
    'Forms!frmCreateItem!PrintLine4.Enabled = False

End Sub

Private Sub lockPrintFields(LockField As Boolean)

    Forms!frmCreateItem!PrintLine1.Locked = LockField
    Forms!frmCreateItem!PrintLine2.Locked = LockField
    Forms!frmCreateItem!PrintLine3.Locked = LockField


End Sub


Private Sub PrintType()
Dim CableType As String
Dim CableColor  As String
Dim NewExt As String
Dim Aresponse As Integer
CableType = Left(Me.ItemNo, 1)
CableColor = Mid(Me.ItemNo, 10, 1)
Dim strNewItemNo As String



Select Case CableColor
    Case "C"
        NewExt = "-12"
    Case "B"
        NewExt = "-11"
    Case "A"
        NewExt = "-10"
    Case Else
        NewExt = "-0" & CableColor
End Select

'Finds the next Oracle Number and appends it to frmCreateItem
'DoCmd.OpenForm "frmOracleNextNo"
    strNewItemNo = NextItemNo(Me.ItemNo, False)
    Forms!frmCreateItem![NewOracle#] = strNewItemNo
    
    
    

'Evaluates if this is a special print or AFL Standard
'If statement identifying special print
If Mid(Forms!frmMainMenu!ItemNo, 9, 1) = 2 Or Mid(Forms!frmMainMenu!ItemNo, 9, 1) = "S" Or Me.ItemNo Like "l*" Then
    
    Call lockPrintFields(False)
    
    Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-10"
    
    If ArmorCheck And Me.ItemNo Like "l*" Then
    Forms!frmCreateItem![NewOracle#].Value = Forms!frmCreateItem![NewOracle#].Value & "IA"
    End If
    
    Forms!frmCreateItem!PrintLine4.Locked = False


    If Me.ItemNo Like "*BOX*" Then
        Call BoxPrint
        Exit Sub
    End If
    
    
    'Asks user what UOM the customer wants for print
    Aresponse = MsgBox("Is the print in Meters?", vbYesNo, "Continue")
    
    
    
    If Aresponse = vbYes Then
        
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 METERS"
        
    Else
        
        Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 FEET     (Print every other foot)"
        
    End If
    

  
    
ElseIf Mid(Forms!frmMainMenu!ItemNo, 9, 1) = 1 Or Forms!frmMainMenu!ItemNo Like "m*@*" Then
    
    Call lockPrintFields(True)
    
    If Me.ItemNo Like "*BOX*" Then
        Call BoxPrint
    Else
        
        If Me.ItemNo Like "*msha*" Then
            Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-04"
            Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 FEET     (Print every other foot)"
        Else
            Aresponse = MsgBox("Is the print in Meters?", vbYesNo, "Continue")
            If Aresponse = vbYes Then
                Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-01"
                Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 METERS"
                
                
            Else
                
                Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-02"
                Forms!frmCreateItem![PrintLine4].Value = "MM/YY 000000 FEET     (Print every other foot)"
                
                
            End If
        End If
    
    
        Forms!frmCreateItem![PrintType].Value = "1"
        Forms!frmCreateItem![Customer].Value = "AFL STANDARD"
        
        If bFurcation Then
                Forms!frmCreateItem!PrintLine1 = "AFL FURCATION TUBE  1-800-AFL-FIBER"
        
        ElseIf bCenterMember Then
            Forms!frmCreateItem!PrintLine1 = "[Insert Frp OD]mm to [Insert Final OD]mm  [Material Type]"
        Else
            If Left(Me.ItemNo, 1) = "A" Then
                Forms!frmCreateItem!PrintLine1 = "AFL eABF OPTICAL CABLE"
            Else
            
                Forms!frmCreateItem!PrintLine1 = "AFL OPTICAL CABLE   1-800-AFL-FIBER"
            End If
        End If

        
        Call DissablePrint(True)
    
    End If
    
ElseIf Mid(Forms!frmMainMenu!ItemNo, 9, 1) = "U" Then
    
    
    
    If strNewItemNo Like "rbn*" Then
    
    Else
        Select Case CableType
            Case "F", "T"
                Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & NewExt
            Case Else
                Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-00"
        End Select
    End If
    Forms!frmCreateItem![PrintType].Value = "0"
    Forms!frmCreateItem![Customer].Value = "UNPRINTED"
    
    Forms!frmCreateItem!Customer.Enabled = False
    Forms!frmCreateItem!PID.Enabled = False
    Forms!frmCreateItem!Spec.Enabled = False
    Forms!frmCreateItem!CustomerRev.Enabled = False
    Forms!frmCreateItem!ListingCompany = "NONE"
    Forms!frmCreateItem!ListingCompany.Enabled = False
    Forms!frmCreateItem!ListingType.Enabled = False
    Forms!frmCreateItem!ListingTypeCanada.Enabled = False
    

    
ElseIf Mid(Forms!frmMainMenu!ItemNo, 9, 1) = "T" Then
    
    Forms!frmCreateItem![NewOracle#].Value = strNewItemNo & "-TEST"
    Forms!frmCreateItem![PrintType].Value = "1"
    Forms!frmCreateItem![Customer].Value = "AFL TEST CABLE"
    Forms!frmCreateItem!PrintLine1 = "AFL TEST CABLE"
    Forms!frmCreateItem!PrintLine4 = "MM/YY 000000 METERS"
    
    Forms!frmCreateItem!Customer.Enabled = False
    
    Call lockPrintFields(False)

    
Else
    MsgBox ("Check design code - missing/incorrect print indicator")
    DoCmd.Close acForm, "frmCreatItem"
    'Me.Visible = True
    DoCmd.Close acForm, "frmOracleNextNo"
    If CurrentProject.AllForms("frmCreateItem").IsLoaded Then
        Call Forms("frmCreateItem").btnClose_Click
    End If
    If CurrentProject.AllForms("frmFiberMatchExisting").IsLoaded Then
        Call Forms("frmFiberMatchExisting").btnClose_Click
    End If
    
End If
DoCmd.Close acForm, "frmOracleNextNo"



End Sub


Private Sub MixedFiber()

If Me.ItemNo Like "*/*" Then
    Forms!frmCreateItem!MixedFiber = 1
    Forms!frmCreateItem!Fiber2.Visible = True
    Forms!frmCreateItem!OM2.Visible = True
    Forms!frmCreateItem!BIF2.Visible = True
    Forms!frmCreateItem!SubX = 1
    Forms!frmCreateItem!FiberSpecs2.Visible = True
Else
    Forms!frmCreateItem!MixedFiber = 0
    Forms!frmCreateItem!Fiber2.Visible = False
    Forms!frmCreateItem!Fiber2 = "NONE"
    Forms!frmCreateItem!OM2.Visible = False
    Forms!frmCreateItem!BIF2.Visible = False
    Forms!frmCreateItem!FiberSpecs2.Visible = False
End If

End Sub

Public Sub FiberExt()


Forms!frmCreateItem!FiberExt = FiberExtension(Me.[ItemNo])

End Sub




Private Sub Combo2_AfterUpdate()
    ' Find the record that matches the control.
    Dim rs As Object

    Set rs = Me.Recordset.Clone
    rs.FindFirst "[Item No] = '" & Me![Combo2] & "'"
    If Not rs.EOF Then Me.Bookmark = rs.Bookmark
End Sub

Private Sub btnClose_Click()
On Error GoTo Err_cmdCloseForm_Click

'OpenAllDatabases False
 

 DoCmd.Close
 
Exit_cmdCloseForm_Click:
 Exit Sub
 
Err_cmdCloseForm_Click:
 MsgBox Err.Description
 Resume Exit_cmdCloseForm_Click

End Sub

Private Sub btnDesignCode_Click()
'Me.FormFooter.Visible = True
End Sub

Public Sub btnSubmit_Click()
Dim lResponse As Integer
Dim KResponse As Integer
Dim SubColor As String
Dim cTBType As String



On Error GoTo Error_Handler:

cTBType = Mid(Forms!frmMainMenu!ItemNo, 12, 1)
SubColor = Mid(Me.ItemNo, 11, 1)




DoCmd.Hourglass True



If IsNull(Me.ItemNo) = True Then
    MsgBox ("Please enter a design code")
    DoCmd.Hourglass False
    Exit Sub
End If
    
If CurrentProject.AllForms("frmCreateItem").IsLoaded Then
    DoCmd.Close acForm, "frmCreateItem"
End If
    
    
    
    DoCmd.OpenForm "frmBaseExist"
    
    If IsNull(Forms!frmBaseExist!DesignCode) = True And Not Me.ItemNo Like "l*" And Not Me.ItemNo Like "*m????@*" And Mid(Me.ItemNo, 9, 1) <> "T" Then
     'If FindExistingBase = False Then
        KResponse = MsgBox("No active Base or incorrect Tight Buffer type." & vbCrLf & "Please contact Product Engineering", vbCritical)
        DoCmd.Close acForm, "frmBaseExist"
        DoCmd.Hourglass False
        Exit Sub
    End If
        

    DoCmd.Close acForm, "frmBaseExist"
        
        
'Idenfities an amored build and changes to selection to Basic Cable
        If Me.ItemNo Like "*-AIA*" Then
            ArmorCheck = True
        End If
        
        

        
        lResponse = MsgBox("Are you ready to create this Item", vbYesNo, "Continue")
        
        If lResponse = vbNo Then
            DoCmd.Hourglass False
            Exit Sub
        End If
        
        'If lResponse = vbYes Then
        Forms!frmMainMenu.Form.Visible = False
            
            DoCmd.OpenForm "frmCreateItem"
            
            
            'Set rst = dbs.OpenRecordset("qryMainMenuMatch", dbOpenDynaset)
            If ArmorCheck Then
                DoCmd.OpenForm "frmOracleMatch"
                
                'If Forms!frmOracleMatch.Exists = -1 Then 'commented 6 lines of code for new armoring logic (unmatching jacket colors)
                    Forms!frmCreateItem!Armor = -1
                    Forms!frmCreateItem!Exists = -1
                    Forms!frmMainMenu!Bypass = -1
                    DoCmd.OpenForm "frmFiberMatchExisting"
                'Else
                    'Forms!frmCreateItem!Exists = 0
                    'Forms!frmMainMenu!Bypass = 0
                'End If
            Else
                Forms!frmCreateItem!Exists = 0
                Forms!frmMainMenu!Bypass = 0
                Forms!frmCreateItem!Armor = 0
            End If
            

            If CurrentProject.AllForms("frmCreateItem").IsLoaded Then
            
                If ArmorCheck Then
                    Call ArmorSelection(Me.ItemNo)     'Inputs armor print and type for item to be built
                End If
            
                Call PrintType          'Asks user what UOM the customer wants for print
                Call FiberExt           'Identifies if the Item has a fiber Extension indicating a certain fiber to use
                Call MixedFiber         'Identifies mixed fiber cables
            
                'If Forms!frmCreateItem!Armor <> -1 Then
                    Call Forms("frmCreateItem").Autofill 'Chooses default information for item build
                    RaiseEvent ItemRequestNumber(Nz(Me.txItemRequestNumber, ""))
                'End If
            End If
            
        'End If
    'End If


DoCmd.Close acForm, "frmOracleMatch"

DoCmd.Hourglass False

Exit_Error_Handler:
    Exit Sub

Error_Handler:
    DoCmd.Hourglass False
    MsgBox Err.Description
    If CurrentProject.AllForms("frmCreateItem").IsLoaded Then
        Call Forms("frmCreateItem").btnClose_Click
    End If
    If CurrentProject.AllForms("frmFiberMatchExisting").IsLoaded Then
        'Call Forms("frmFiberMatchExisting").btnClose_Click
        DoCmd.Close acForm, "frmFiberMatchExisting"
    End If
    DoCmd.Close acForm, "frmBaseExist"
    DoCmd.Close acForm, "frmOracleNextNo"
    'Me.Visible = True
'    DoCmd.Close acForm, ""
    Resume Exit_Error_Handler

    


End Sub

Private Sub Command28_Click()
On Error GoTo Err_cmdCloseForm_Click
 
 DoCmd.RunCommand acCmdSaveRecord
 DoCmd.Close
 
Exit_cmdCloseForm_Click:
 Exit Sub
 
Err_cmdCloseForm_Click:
 MsgBox Err.Description
 Resume Exit_cmdCloseForm_Click
End Sub

Private Sub Form_KeyPress(KeyAscii As Integer)

If KeyAscii = vbKeyReturn Then
    Me.Refresh
    Call btnSubmit_Click
    Beep
End If
End Sub

Private Sub Form_Load()
    Bypass.Value = 0
    BasicProduct.Value = -1
    BasicCable.Value = 0
    Me.ItemNo.SetFocus
    
'OpenAllDatabases True
    
    
End Sub

Private Sub frmCreateItem_Hold()
Dim TBType As String

TBType = Mid(Me.ItemNo, 12, 1)

Forms!frmCreateItem!TBType = TBType

End Sub

Private Sub ItemNo_AfterUpdate()
If Not IsNull(Me.ItemNo) Then
    Me.ItemNo = Replace(Me.ItemNo, Chr(13) & Chr(10), "")
End If
End Sub

Private Sub ItemNo_KeyDown(KeyCode As Integer, Shift As Integer)
If KeyCode = vbKeyReturn Then
    Me.Refresh
    Call btnSubmit_Click
    Beep
End If
End Sub

Private Sub ItemNo_KeyPress(KeyAscii As Integer)
Call LimitKeyPress(Me.ItemNo, 30, KeyAscii)
Call LimitChange(Me.ItemNo, 30)
End Sub


Sub LimitKeyPress(ctl As control, iMaxLen As Integer, KeyAscii As Integer)
On Error GoTo Err_LimitKeyPress
    ' Purpose:  Limit the text in an unbound text box/combo.
    ' Usage:    In the control's KeyPress event procedure:
    '             Call LimitKeyPress(Me.MyTextBox, 12, KeyAscii)
    ' Note:     Requires LimitChange() in control's Change event also.

    If Len(ctl.Text) - ctl.SelLength >= iMaxLen Then
        If KeyAscii <> vbKeyBack Then
            KeyAscii = 0
            Beep
        End If
    End If

Exit_LimitKeyPress:
    Exit Sub

Err_LimitKeyPress:
    'Call LogError(Err.Number, Err.Description, "LimitKeyPress()")
    Resume Exit_LimitKeyPress
End Sub

Sub LimitChange(ctl As control, iMaxLen As Integer)
On Error GoTo Err_LimitChange
    ' Purpose:  Limit the text in an unbound text box/combo.
    ' Usage:    In the control's Change event procedure:
    '               Call LimitChange(Me.MyTextBox, 12)
    ' Note:     Requires LimitKeyPress() in control's KeyPress event also.

    If Len(ctl.Text) > iMaxLen Then
        MsgBox "Truncated to " & iMaxLen & " characters.", vbExclamation, "Too long"
        ctl.Text = Left(ctl.Text, iMaxLen)
        ctl.SelStart = iMaxLen
    End If

Exit_LimitChange:
    Exit Sub

Err_LimitChange:
    'Call LogError(Err.Number, Err.Description, "LimitChange()")
    Resume Exit_LimitChange
End Sub

Sub LoadTables()

'Clear Tables
DoCmd.OpenQuery "qryCLEARBasicCableSheath"
DoCmd.OpenQuery "qryCLEARBasicProductConstruction"
DoCmd.OpenQuery "qryCLEARUnitSeries"

'Load Tables
DoCmd.OpenQuery "qryAPPENDBasicCableSheath"
DoCmd.OpenQuery "qryAPPENDBasicProductConstruction"
DoCmd.OpenQuery "qryAPPENDUnitSeries"


End Sub

Function FindExistingBase() As Boolean

Dim cnn As ADODB.Connection
Dim rst As New ADODB.Recordset
Dim strSQL As String

Set cnn = CurrentProject.Connection

strSQL = "SELECT * FROM qryItemNoSearchMatchBase"

rst.Open strSQL, cnn, adOpenKeyset, adLockOptimistic


If rst.EOF = True Then
    MsgBox ("No Existing Base")
    FindExistingBase = False
Else
    FindExistingBase = False
End If
    
rst.Close
cnn.Close


End Function




